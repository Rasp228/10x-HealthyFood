name: Test & Build Master

# Permissions dla GITHUB_TOKEN
permissions:
  contents: read
  checks: write
  pull-requests: write

# Uruchomienie workflow
on:
  # Automatycznie po push do mastera
  push:
    branches:
      - master

  # Automatycznie po pull request do mastera
  pull_request:
    branches:
      - master

  # MoÅ¼liwoÅ›Ä‡ uruchomienia manualnego
  workflow_dispatch:

# Concurrency - anuluj poprzednie uruchomienia dla tej samej gaÅ‚Ä™zi
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Przygotowanie i walidacja kodu
  code-quality:
    name: Kontrola jakoÅ›ci kodu
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout kodu
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version-file: .nvmrc

      - name: Linting kodu
        run: npm run lint

      - name: Sprawdzenie formatowania
        run: npm run format -- --check

  # Job 2: Build produkcyjny
  build:
    name: Build produkcyjny
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality

    steps:
      - name: Checkout kodu
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version-file: .nvmrc

      - name: Build aplikacji
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.run_number }}
          path: dist/
          retention-days: 7

  # Job 3: Testy jednostkowe
  unit-tests:
    name: Testy jednostkowe
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build

    steps:
      - name: Checkout kodu
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version-file: .nvmrc

      - name: Uruchomienie testÃ³w jednostkowych
        run: npm run test

  # Job 4: Testy E2E
  e2e-tests:
    name: Testy E2E
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    environment: integration

    env:
      TEST_MODE: true
      NODE_ENV: test
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

    steps:
      - name: Checkout kodu
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version-file: .nvmrc

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Instalacja przeglÄ…darek Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium
        continue-on-error: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.run_number }}
          path: dist/

      - name: Uruchomienie testÃ³w E2E
        run: npm run test:e2e

      - name: Upload raportÃ³w Playwright
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 7

  # Job 5: Status comment - uruchamia siÄ™ tylko gdy wszystkie poprzednie przejdÄ…
  status-comment:
    name: Status comment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-quality, build, unit-tests, e2e-tests]
    if: always() && needs.code-quality.result == 'success' && needs.build.result == 'success' && needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success'

    steps:
      - name: Komentarz o sukcesie pipeline
        run: |
          echo "ðŸŽ‰ Pipeline zakoÅ„czony sukcesem!"
          echo "âœ… Kontrola jakoÅ›ci kodu: ${{ needs.code-quality.result }}"
          echo "âœ… Build produkcyjny: ${{ needs.build.result }}"
          echo "âœ… Testy jednostkowe: ${{ needs.unit-tests.result }}"
          echo "âœ… Testy E2E: ${{ needs.e2e-tests.result }}"
          echo ""
          echo "Wszystkie etapy pipeline'a zostaÅ‚y ukoÅ„czone pomyÅ›lnie."
